import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import {
  ApiResponse,
  CreateRoomDto,
  Room,
  Message,
  Chat,
  SocketEventsMap,
} from 'digiroom-types';
import { axios } from 'utils/axios.util';

export interface RoomState {
  username: string;
  userId: string;
  room: Room | null;
  messages: Message[];
  state: 'idle' | 'loading' | 'failed';
}

const initialState: RoomState = {
  username: localStorage.getItem('username') ?? '',
  userId: localStorage.getItem('userId') ?? '',
  room: null,
  messages: [],
  state: 'idle',
};

export const roomSlice = createSlice({
  name: 'room',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changeCurrentVideo(state, action: PayloadAction<Room>) {
      state.room = action.payload;
    },
    receiveMessage(state, action: PayloadAction<Message>) {
      state.messages.push(action.payload);
    },
    setUsername(state, action: PayloadAction<string>) {
      state.username = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(createRoom.pending, state => {
        state.state = 'loading';
      })
      .addCase(createRoom.fulfilled, (state, action) => {
        state.state = 'idle';
        state.room = action.payload.data;
        state.userId = action.payload.data.users[0]._id; // bc its first user its ok
      });

    builder
      .addCase(getRoom.pending, state => {
        state.state = 'loading';
      })
      .addCase(getRoom.fulfilled, (state, action) => {
        state.state = 'idle';
        state.room = action.payload.roomData.data;
        state.messages = action.payload.chatData.data.messages;
      });

    builder
      .addCase(addUserToRoom.pending, (state, action) => {
        state.username = action.meta.arg.username;
      })
      .addCase(addUserToRoom.fulfilled, (state, action) => {
        const username = action.meta.arg.username;
        state.userId =
          action.payload.data.users.find(user => user.name === username)?._id ?? '';
        state.room = action.payload.data;
      });

    builder

      .addCase(joinRoom.pending, state => {
        state.state = 'loading';
      })
      .addCase(joinRoom.fulfilled, (state, action) => {
        state.state = 'idle';
        state.room = action.payload.data;
      });
  },
});

const createRoom = createAsyncThunk(
  `${roomSlice.name}/createRoom`,
  async (payload: CreateRoomDto, { rejectWithValue }) => {
    try {
      const { data } = await axios.post<ApiResponse<Room>>('/room', payload);

      const userId = data.data.users[0]._id;
      localStorage.setItem('userId', userId);

      return data;
    } catch (e) {
      return rejectWithValue(e);
    }
  },
);

const getRoom = createAsyncThunk(
  `${roomSlice.name}/getRoom`,
  async ({ roomName }: { roomName: string }, { rejectWithValue }) => {
    try {
      const roomPromise = axios.get<ApiResponse<Room>>(`/room/${roomName}`);
      const chatPromise = axios.get<ApiResponse<Chat>>(`/room/${roomName}/chat`);

      const [{ data: roomData }, { data: chatData }] = await Promise.all([
        roomPromise,
        chatPromise,
      ]);

      return { roomData, chatData };
    } catch (e) {
      return rejectWithValue(e);
    }
  },
);

const addUserToRoom = createAsyncThunk(
  `${roomSlice.name}/addUserToRoom`,
  async (
    { roomName, username }: { roomName: string; username: string },
    { rejectWithValue },
  ) => {
    try {
      const { data } = await axios.post<ApiResponse<Room>>(`/room/${roomName}/user`, {
        username,
      });

      const userId = data.data.users.find(user => user.name === username)?._id ?? '';

      localStorage.setItem('userId', userId);

      return data;
    } catch (e) {
      return rejectWithValue(e);
    }
  },
);

const joinRoom = createAsyncThunk(
  `${roomSlice.name}/joinRoom`,
  async (
    {
      roomName,
      username,
      joinRoomFn,
    }: { roomName: string; username: string; joinRoomFn: SocketEventsMap['join-room'] },
    { rejectWithValue, dispatch },
  ) => {
    try {
      let { roomData } = await dispatch(getRoom({ roomName })).unwrap();

      const isUsernameguest = roomData.data.users.find(user => user.name === username);

      if (!isUsernameguest) {
        const newRoomData = await dispatch(
          addUserToRoom({ roomName, username }),
        ).unwrap();

        roomData = newRoomData;
      }

      joinRoomFn(roomName, username);

      const userId = roomData.data.users.find(user => user.name === username)?._id ?? '';

      localStorage.setItem('userId', userId);

      return roomData;
    } catch (e) {
      return rejectWithValue(e);
    }
  },
);

export const roomActions = {
  ...roomSlice.actions,
  createRoom,
  getRoom,
  addUserToRoom,
  joinRoom,
};

export const roomReducer = roomSlice.reducer;
